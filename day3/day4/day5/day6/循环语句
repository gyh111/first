=========================第四章（循环结构）======================

循环结构:针对某些业务的实现，我们可能需要去反复的执行一段程序，那么我们就可以使用循环结构。


循环语句的语法分类：

    1、while循环语句
    
          语法结构：
          
          while(表达式){
                               语句;
                               条件改变的操作;                    
          }
     
          注意：
       a、表达式的值，只能是boolean类型。  
       
       b、在循环体中一定要有改变条件的语句，否则就是一个死循环。
       
       c、判断条件后，如果为true，则执行循环体中的语句，执行后再次回去判断条件。直到条件不成立的时候，才会终止循环的执行。     
       
       d、对于一个循环最终一定要有出口。     
    
    2、do-while循环语句
    
          语法结构：
         
         do{
                             语句;
                            条件改变的操作;                            
         }while(表达式); 
       
       注意：
       a、表达式的值，只能是boolean类型。  
       
       b、在循环体中一定要有改变条件的语句，否则就是一个死循环。
       
       c、无论如何，都要执行1次循环，后续的循环是否继续执行，取决于表达式的结果。     
       
       d、对于一个循环最终一定要有出口。     
       
       
                注意：break的用法总结：
		 *   
		 *     1、break可以使用在switch语句中，表示跳出整个switch的语句体。
		 *     
		 *     2、break可以使用在循环（while、do-while、for）体中。表示的是终止整个循环。    
                  
    
    3、for循环语句
    
          语法结构：
          
            a、标准的语法格式
            
              for(变量初始化;条件判断;变量改变){
                                              语句;
              }    
          
              eg:
              for(int i=0;i<value;i++){
                                              语句;
              }    
          
            b、基于标准格式演变的格式
            
                                 变量初始化;
              for(;条件判断;变量改变){
                                              语句;
              }   
          
            c、基于标准格式演变的格式
            
                                 变量初始化;
              for(;条件判断;){
                                              语句;
                                              变量改变;
              }   

            d、死循环格式(一切都不能确定)
            
             for(;;){
                                      语句;
             }

           e、for增强循环(for循环中的特例)
           
             for(变量:集合){
                                      语句;
             }
             
         注意！以上的各种循环语句，都是可以被嵌套使用的。一般超不过三层。          

for循环中也是可以同时定义多个变量，和多个条件的改变，中间使用[,]号进行分割

==============================第五章（多重循环及程序的调试）============================

多重循环（在循环中套循环）。

多重循环一般不宜超过三层。

注意：

   1、多重循环的一个很重要的特点：外层的循环执行1次，内层的循环需要执行一轮。所以，嵌套的循环就是外部循环和内部循环次数的乘积。
   
   2、各种循环之间可以互相的嵌套。
========================================================================================
public class Demo4 {
	/**
	 * 循环输入某同学S1结业考试的5门课成绩，并计算平均分
	 * @param args
	 */
	public static void main(String[] args) {
		
		Scanner   sc = new  Scanner(System.in);
	
		//输入同学的姓名的过程。（录入1次）
		System.out.println("输入学生的姓名:");
		String name = sc.next();
		
		//定义在for循环的外部，避免每次循环的时候进行了重新的初始化。
		int sum = 0 ;
		
		//分别录入5门课的分数
		int i=1;
		for(;i<=5;i++){
			System.out.println("请录入第"+i+"门课程的成绩:");
			//score是每一门课程的分数
			int score = sc.nextInt();
			//将5门课程的分数进行求和运算,定义一个新的变量来进行保存 sum
			sum+=score;
		}
		
		//计算平均分。（计算1次）,并进行打印（显示姓名,平均分）
		double  avg = sum/(i-1);
		
		System.out.println(name+"同学的5门课程的平均分为:"+avg);
		
		/**
		 * 注意：
		 * 1、以后只要是用来统计总量的，必须要定义在循环的外部。避免数值的重新初始化。
         * 2、注意变量的使用范围。比如：在for循环中定义i的变量，只能在for循环体中进行使用，在外部是无法使用的。
		 */
====================================================================================================
public class Demo3 {

	public static void main(String[] args) {

		// 标准for循环的用法
		/*
		 * for(int i=1;i<=10;i++){ System.out.println("执行第"+i+"次~!"); }
		 */

		// 把for循环中的表达式1移除到外部定义
		/*
		 * int i = 1; for(;i<=10;i++){ System.out.println("执行第"+i+"次~!"); }
		 */

		// 把for循环中的表达式1移除到外部定义
		/*int i = 1;
		for (; i <= 10;) {
			System.out.println("执行第" + i + "次~!");
			i++;
		}*/
		
		//for循环中的死循环
		/*for(;;){
			System.out.println("执行~~~");
		}*/
		
		//这种变量在同一个时刻，只能保存一个唯一性的值。
		int  x = 1;
		x  = 10;
		//定义一个数组（数组是可以在同一个时刻保存多个值的【一堆值】）
		int[] is = {10,20,30,40,50}; 
		
		//使用for增强循环
		for(int v : is){
			System.out.println(v);
		}
		
		/**
		 * for标准循环 和 for增强循环的区别？
		 * 
		 *   1、都是循环。
		 *   
		 *   2、能够使用for增强循环的地方，一定能使用for标准循环来实现。
		 *   
		 *   3、能够使用for标准循环的地方，不一定能使用for增强循环进行替代。
		 *   
		 *   结论：for增强循环是 for标准循环的一种特列。
		 */
