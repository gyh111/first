=========================第四章（循环结构）======================

循环结构:针对某些业务的实现，我们可能需要去反复的执行一段程序，那么我们就可以使用循环结构。


循环语句的语法分类：

    1、while循环语句
    
          语法结构：
          
          while(表达式){
                               语句;
                               条件改变的操作;                    
          }
     
          注意：
       a、表达式的值，只能是boolean类型。  
       
       b、在循环体中一定要有改变条件的语句，否则就是一个死循环。
       
       c、判断条件后，如果为true，则执行循环体中的语句，执行后再次回去判断条件。直到条件不成立的时候，才会终止循环的执行。     
       
       d、对于一个循环最终一定要有出口。     
    
    2、do-while循环语句
    
          语法结构：
         
         do{
                             语句;
                            条件改变的操作;                            
         }while(表达式); 
       
       注意：
       a、表达式的值，只能是boolean类型。  
       
       b、在循环体中一定要有改变条件的语句，否则就是一个死循环。
       
       c、无论如何，都要执行1次循环，后续的循环是否继续执行，取决于表达式的结果。     
       
       d、对于一个循环最终一定要有出口。     
       
       
                注意：break的用法总结：
		 *   
		 *     1、break可以使用在switch语句中，表示跳出整个switch的语句体。
		 *     
		 *     2、break可以使用在循环（while、do-while、for）体中。表示的是终止整个循环。    
                  
    
    3、for循环语句
    
          语法结构：
          
            a、标准的语法格式
            
              for(变量初始化;条件判断;变量改变){
                                              语句;
              }    
          
              eg:
              for(int i=0;i<value;i++){
                                              语句;
              }    
          
            b、基于标准格式演变的格式
            
                                 变量初始化;
              for(;条件判断;变量改变){
                                              语句;
              }   
          
            c、基于标准格式演变的格式
            
                                 变量初始化;
              for(;条件判断;){
                                              语句;
                                              变量改变;
              }   

            d、死循环格式(一切都不能确定)
            
             for(;;){
                                      语句;
             }

           e、for增强循环(for循环中的特例)
           
             for(变量:集合){
                                      语句;
             }
             
         注意！以上的各种循环语句，都是可以被嵌套使用的。一般超不过三层。          


==============================第五章（多重循环及程序的调试）============================

一、多重循环（在循环中套循环）。

多重循环一般不宜超过三层。

注意：

   1、多重循环的一个很重要的特点：外层的循环执行1次，内层的循环需要执行一轮。所以，嵌套的循环就是外部循环和内部循环次数的乘积。
   
   2、各种循环之间可以互相的嵌套。
   

二、其它的几种跳转语句：

  1、break的用法
     
     a、用在循环体中，表示终止整个的循环体。
     
     b、用在switch-case语句中，表示跳出整个switch的语句体。
   
  2、continue的用法
  
           使用在循环中，表示的是终止众多次循环中的某一次指定的循环。
  
  3、return的用法
  
    a、在程序中直接使用return关键字，表示方法执行结束。
    
    b、在java中如果需要定义一个有返回值的方法，我们必须要使用return关键字进行结果的返回,并且返回的值要和返回类型兼容。
    
         补充：java中的标识符：我们编写程序的时候，给类、变量、方法等取的名字，这些单词就是标识符。标识符不要使用关键字。    

三、Java中所谓的方法

   1、方法：也称为“函数”，表示的是某种行为动作。（做什么）
       
   2、如何定义方法（方法定义的语法格式）:
   
            方法修饰符   static  返回类型   方法名称(参数列表...){
        ...方法体...       
     }
     
            例如：
     
     public  static  所有的数据类型/void  方法名称(int age,String name){
         java程序代码.....
     }  
   
   3、方法的分类形式
   
     a、无返回值，无参数的方法。
     
     b、无返回值，有参数的方法。
     
     c、有返回值，有参数的方法。
     
           见：Demo5.java程序中。
           
 
 注意：要非常熟悉的掌握方法的定义及方法的调用。
 
 ===========================数组==========================

一、数据的定义？

      数组概念：表示一组（一批）数据。
      
      数组的特点：
      
        1、数组也是一种类型，是属于复合引用类型。数组保存的数据一定是同一种数据类型的数据集合。    
        
        2、定义数组的时候，一定要确定其内存空间大小（数组的大小）。

二、如何在java程序中创建出一个数组？

        第一种方式：(常用)
         
          数据类型[]  变量名 = new  数据类型[长度];
       
       第二种方式：（常用）    
       
          数据类型[]  变量 = {元素1,元素2,......};
          
      第三种方式：(少用)
      
         数据类型[]  变量 =  new 数据类型[]{元素1,元素2,......};          
        

       注意：
       
       1、数组中所保存的数据，我们称为“数组的元素”。
       
       2、数组是存在下标的，并且是从0开始的。到长度-1结束。比如：{1，2,3,4,5}   长度为 5  下标是从0---4。



三、在java程序中如何操作和使用我们的数组？

         我们通常会使用java内部提供的一些类System、Scanner、Math、数组 .......，通过这些类我们可以访问内部的属性和方法。
         
         访问属性：  对象.名称；
         访问方法：  对象.名称([.....]);

    1、数组的遍历?
    
       a、使用for标准循环来进行实现。
       
       b、使用for增强循环来进行实现。
 
